#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define ll long long
#define WhoCare ios_base::sync_with_stdio(false);cin.tie(NULL);
#define F first
#define S second
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1, 1};
int dx8[8] = {1, 1, 1, 0, 0, -1, -1, -1};
int dy8[8] = {1, -1, 0, 1, -1, 1, -1, 0};
const int N = 3e5 + 9;
int n, m;
vector<pair<int, int>>g[15];
int dp[11][1 << 11];
int solve(int idx, int mask) {

    if(mask + 1 == (1 << n))return 0;

    int &ret = dp[idx][mask];
    if(~ret)return ret;
    ret = 1e9;
    for( auto ed : g[idx]) {
        int go = ed.F, c = ed.S;
        if(mask >> go & 1 == 1)continue;
        ret = min(ret, solve(go, mask | 1 << go) + c);
    }

    return ret;

}
int main() {

    WhoCare
    /*
        Micro is having a graph containing N vertices and M edges, each edge is having an associated weight. He knows for sure that the graph contains several Hamiltonian Paths (path that visits all the vertices exactly once). He challenged his friend to find out the minimum element of the array which stores the strength of all Hamiltonian Paths in the graph. Strength of a Hamiltonian Path is the sum of weight of edges in that path. But Micro himself does not know the answer to it. Help Micro in solving this problem.

    */

    memset(dp, -1, sizeof dp);
    cin >> n >> m;
    while(m--) {
        int x, y, c;
        cin >> x >> y >> c;
        x--, y--;
        g[x].push_back({y, c});
        g[y].push_back({x, c});
    }

    int ans = 1e9;
    for(int i = 0; i < n; i++) {

        int mask = 0;
        mask |= (1 << i);
        ans = min(ans, solve(i, mask));

    }

    cout << ans;

    return 0;
}
