const int N = 1e5 + 2, block_Size = sqrt(3e4), inf = 2e9;
int n, q, a[N], ans[2 * N];
struct query {
    int l, r, id;
    query() {}
    query(int l, int r, int id) : l(l), r(r), id(id) {}
 
    bool operator <(const query & other) {
        return make_pair( l / block_Size, r) < make_pair(other.l / block_Size, other.r);
    }
} queries[2 * N];
void add(int x, int &cnt) {
    
}
void del(int x, int &cnt) {
    
}
void solve() {
 
    int cur_l = 0, cur_r = -1, cnt = 0;
    for(int i = 0; i < q; i++) {
 
        while(cur_r < queries[i].r) add(a[++cur_r], cnt);
 
        while(cur_r > queries[i].r) del(a[cur_r--], cnt);
 
        while(cur_l < queries[i].l) del(a[cur_l++], cnt);
 
        while(cur_l > queries[i].l) add(a[--cur_l], cnt);
 
 
        ans[queries[i].id] = cnt;
    }
}


// sort el queries first by block_sz then right