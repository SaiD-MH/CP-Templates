#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define ll long long
#define WhoCare ios_base::sync_with_stdio(false);cin.tie(NULL);
#define F first
#define S second
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1, 1};
int dx8[8] = {1, 1, 1, 0, 0, -1, -1, -1};
int dy8[8] = {1, -1, 0, 1, -1, 1, -1, 0};
const int N = 1e5 + 7, LGN = __lg(N) + 1;

ll a[N];

int n, q;

struct node {

    ll sum;
    bool less_than_two;

} seg[N * 4];


node merge(node &lf, node &rt) {



    return {lf.sum + rt.sum, (lf.less_than_two && rt.less_than_two)};



}


void build(int ni = 0, int ns = 0, int ne = n - 1) {

    if(ne == ns) {
        seg[ni].sum = a[ns];
        seg[ni].less_than_two = (a[ns] < 2);
        return ;
    }

    int lf = ni * 2 + 1;
    int rt = ni * 2 + 2;
    int mid = ns + (ne - ns) / 2;


    build(lf, ns, mid);
    build(rt, mid + 1, ne);

    seg[ni] = merge(seg[lf], seg[rt]);
}

ll query(int qs, int qe, int ni = 0, int ns = 0, int ne = n - 1) {


    if(ne < qs || ns > qe)
        return 0;
    if(ns >= qs && qe >= ne) {

        return  seg[ni].sum;
    }

    int lf = ni * 2 + 1;
    int rt = ni * 2 + 2;
    int mid = ns + (ne - ns) / 2;

    return (query(qs, qe, lf, ns, mid) + query(qs, qe, rt, mid + 1, ne));

}


void update(int qs, int qe, int ni = 0, int ns = 0, int ne = n - 1) {


    if(ne < qs || ns > qe || seg[ni].less_than_two)
        return ;

    if(ns == ne) {

        seg[ni].sum = (ll)sqrtl(seg[ni].sum);
        seg[ni].less_than_two = (seg[ni].sum < 2);
        return ;
    }

    int lf = ni * 2 + 1;
    int rt = ni * 2 + 2;
    int mid = ns + (ne - ns) / 2;

    update(qs, qe, lf, ns, mid);
    update(qs, qe, rt, mid + 1, ne);

    seg[ni] = merge(seg[lf], seg[rt]);
}


int main() {


    WhoCare

    int caseID = 1;
    while(cin >> n) {

        cout << "Case #" << caseID++ << ":\n";
        for(int i = 0; i < n; i++)
            cin >> a[i];

        build();

        cin >> q;

        while(q--) {

            int ty, l, r;
            cin >> ty >> l >> r;

            l--, r--;

            if(l > r)
                swap(l, r);

            if(ty == 1) {
                cout << query(l, r) << "\n";
            } else {

                update(l, r);

            }
        }
        cout << "\n";
    }
    return 0;
}
