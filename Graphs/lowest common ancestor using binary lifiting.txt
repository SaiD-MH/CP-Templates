#include<bits/stdc++.h>
#define ll long long
#define WhoCare ios_base::sync_with_stdio(false);cin.tie(NULL);
#define F first
#define S second
using namespace std;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1, 1};
int dx8[8] = {1, 1, 1, 0, 0, -1, -1, -1};
int dy8[8] = {1, -1, 0, 1, -1, 1, -1, 0};
const int N = 1e6, LGN = __lg(N) + 1;
int p, up[N][25];
vector<int>adj[N];
int timer, inTime[N], outTime[N];
void dfs(int node, int par) {
    inTime[node] = ++timer;
    up[node][0] = par;
    for(int i = 1; i <= 17; i++)
        up[node][i] = up[up[node][i - 1]][i - 1];
    for(auto ch : adj[node])
        if(ch != par)
            dfs(ch, node);

    outTime[node] = ++timer;
}
bool is_ancestor(int u, int v) {
    return u==0||(inTime[u] <= inTime[v] && outTime[u] >= outTime[v]);
}
int lca(int u, int v) {
    if(is_ancestor(u, v))return u;
    if(is_ancestor(v, u))return v;
    for(int i = 17; i >= 0; i--)
        if(!is_ancestor(up[u][i], v))
            u = up[u][i];

    return up[u][0];
}
int main() {

    WhoCare
    int tc;
    tc = 1;
    while(tc--) {
        int n, q;
        cin >> n >> q;
        for(int i = 2; i <= n; i++) {
            cin >> p;
            adj[p].push_back(i);
        }
        dfs(1, 0);
        while(q--) {
            int u, v;
            cin >> u >> v;
            cout << lca(u, v) << "\n";
        }

    }
    return 0;
}
